

MODULE main

VAR
  landingBut1 : button(lift.floor = 1 & lift.door = open);
  landingBut2 : button(lift.floor = 2 & lift.door = open);
  landingBut3 : button(lift.floor = 3 & lift.door = open);
  landingBut4 : button(lift.floor = 4 & lift.door = open);
  landingBut5 : button(lift.floor = 5 & lift.door = open);
  lift : lift(priority_call,no_call);

DEFINE
  no_call := (((( !landingBut1.pressed) & ( !landingBut2.pressed)) & ( !landingBut3.pressed)) & ( !landingBut4.pressed)) & ( !landingBut5.pressed);
  landing_call := 
    case
      lift.direction = down : 
        case
          landingBut5.pressed & (lift.floor > 4) : 5;
          landingBut4.pressed & (lift.floor > 3) : 4;
          landingBut3.pressed & (lift.floor > 2) : 3;
          landingBut2.pressed & (lift.floor > 1) : 2;
          landingBut1.pressed : 1;
          1 : 0;
        esac;
      lift.direction = up : 
        case
          landingBut1.pressed & (lift.floor < 2) : 1;
          landingBut2.pressed & (lift.floor < 3) : 2;
          landingBut3.pressed & (lift.floor < 4) : 3;
          landingBut4.pressed & (lift.floor < 5) : 4;
          landingBut5.pressed : 5;
          1 : 0;
        esac;
    esac;
  priority_call := 
    case
      (lift.ef = 1) & landingBut1.pressed : 1;
      (lift.ef = 2) & landingBut2.pressed : 2;
      (lift.ef = 3) & landingBut3.pressed : 3;
      (lift.ef = 4) & landingBut4.pressed : 4;
      (lift.ef = 5) & landingBut5.pressed : 5;
      1 : landing_call;
    esac;

SPEC
  AG (landingBut2.pressed -> AF (lift.floor = 2 & lift.door = open))

SPEC
  !AG (landingBut2.pressed -> AF (lift.floor = 2 & lift.door = open & lift.direction = down))

SPEC
  !AG (landingBut4.pressed -> AF (lift.floor = 4 & lift.door = open))

SPEC
  AG (lift.ef = 3 -> !E[lift.ef = 3 U (!((landingBut3.pressed -> AF lift.floor = 3) | !lift.ef = 3))])


MODULE lift(landing_call,no_call)

VAR
  ef : {0,1,2,3,4,5};
  floor : {1,2,3,4,5};
  door : {open,closed};
  direction : {up,down};
  liftBut5 : button(floor = 5 & door = open);
  liftBut4 : button(floor = 4 & door = open);
  liftBut3 : button(floor = 3 & door = open);
  liftBut2 : button(floor = 2 & door = open);
  liftBut1 : button(floor = 1 & door = open);

DEFINE
  car_call := 
    case
      direction = down : 
        case
          
          (case
            ( !(ef = 0)) & (landing_call = ef) : 0;
            1 : liftBut5.pressed;
          esac) & (floor > 4) : 5;
          
          (case
            ( !(ef = 0)) & (landing_call = ef) : 0;
            1 : liftBut4.pressed;
          esac) & (floor > 3) : 4;
          
          (case
            ( !(ef = 0)) & (landing_call = ef) : 0;
            1 : liftBut3.pressed;
          esac) & (floor > 2) : 3;
          
          (case
            ( !(ef = 0)) & (landing_call = ef) : 0;
            1 : liftBut2.pressed;
          esac) & (floor > 1) : 2;
          
          case
            ( !(ef = 0)) & (landing_call = ef) : 0;
            1 : liftBut1.pressed;
          esac : 1;
          1 : 0;
        esac;
      direction = up : 
        case
          
          (case
            ( !(ef = 0)) & (landing_call = ef) : 0;
            1 : liftBut1.pressed;
          esac) & (floor < 2) : 1;
          
          (case
            ( !(ef = 0)) & (landing_call = ef) : 0;
            1 : liftBut2.pressed;
          esac) & (floor < 3) : 2;
          
          (case
            ( !(ef = 0)) & (landing_call = ef) : 0;
            1 : liftBut3.pressed;
          esac) & (floor < 4) : 3;
          
          (case
            ( !(ef = 0)) & (landing_call = ef) : 0;
            1 : liftBut4.pressed;
          esac) & (floor < 5) : 4;
          
          case
            ( !(ef = 0)) & (landing_call = ef) : 0;
            1 : liftBut5.pressed;
          esac : 5;
          1 : 0;
        esac;
    esac;
  idle := ((((no_call & ( !
    (case
      ( !(ef = 0)) & (landing_call = ef) : 0;
      1 : liftBut1.pressed;
    esac))) & ( !
    (case
      ( !(ef = 0)) & (landing_call = ef) : 0;
      1 : liftBut2.pressed;
    esac))) & ( !
    (case
      ( !(ef = 0)) & (landing_call = ef) : 0;
      1 : liftBut3.pressed;
    esac))) & ( !
    (case
      ( !(ef = 0)) & (landing_call = ef) : 0;
      1 : liftBut4.pressed;
    esac))) & ( !
    (case
      ( !(ef = 0)) & (landing_call = ef) : 0;
      1 : liftBut5.pressed;
    esac));

ASSIGN
  next(direction) := 
    case
      idle : direction;
      floor = 5 : down;
      floor = 1 : up;
      ((car_call = 0) & (landing_call = 0)) & (direction = down) : up;
      ((car_call = 0) & (landing_call = 0)) & (direction = up) : down;
      1 : direction;
    esac;
  init(direction) := down;
  next(floor) := 
    case
      door = open : floor;
      (car_call = 0) & (landing_call = 0) : floor;
      (direction = up) & (floor < 5) : floor + 1;
      (direction = down) & (floor > 1) : floor - 1;
      1 : floor;
    esac;
  init(floor) := 1;
  door := 
    case
      floor = car_call : open;
      floor = landing_call : open;
      1 : closed;
    esac;

SPEC
  !AG (door = closed -> AF door = open)

SPEC
  AG (liftBut3.pressed -> AF (floor = 3 & door = open))

SPEC
  AG (floor = 2 & liftBut5.pressed & direction = up -> A[direction = up U floor = 5])

SPEC
  AG (floor = 5 & liftBut1.pressed & direction = down -> A[direction = down U floor = 1])

SPEC
  EF (floor = 1 & door = closed & idle)

SPEC
  AG (floor = 1 & idle & door = closed -> EG (floor = 1 & door = closed))

SPEC
  EF (floor = 3 & door = closed & idle)

SPEC
  AG (floor = 3 & idle & door = closed -> EG (floor = 3 & door = closed))

SPEC
  !AG (floor = 4 & idle -> E[idle U floor = 1])

SPEC
  !AG (floor = 3 & !liftBut3.pressed & direction = up -> door = closed)

SPEC
  !AG (floor = 4 & !liftBut4.pressed & direction = down -> door = closed)

SPEC
  !AG (liftBut4.pressed -> AF (floor = 4 & door = open))


MODULE button(reset)

VAR
  pressed : boolean;

ASSIGN
  next(pressed) := 
    case
      reset : 0;
      pressed : 1;
      1 : 0 union 1;
    esac;
  init(pressed) := 0;
