% property 7
% forall i in {2,3,4}. ! AG ( ( Level = i & !liftBut_i.pressed & direction = down) -> door = closed )
% The lift may stop at Levels 2,3 and 4 for landing calls when travelling downwards

%% forall i:Floor. val(i in [2,3,4])=>
%% (
%% < (!liftButton(i))*. direction(down). (!(liftButton(i) || direction(up)  ))*. open(i)>true
%% )

forall j:Floor.
(
  val(j in [2,3,4]) =>
    (
      mu X(Px:FExpr = tt, dx:Direction = down, fx:Floor = 1, drx:Door = closed,liftbutton_i:Bool = false).
        (
          val( ! ((fx == j && dx == down && !liftbutton_i) => (drx == closed) ) )
        || % we can reach such a state
           (exists i:Floor. <landingButton(i)> X(Px,dx,fx,drx,liftbutton_i) )
        || (exists i:Floor. <liftButton(i)> X(Px,dx,fx,drx,liftbutton_i || (i == j)) )
        || (exists i: Floor. <open(i)> X(Px, dx,fx,open,liftbutton_i && (i != j) ) )
        || (exists i:Floor. <Level(i)> X(Px,dx,i,drx,liftbutton_i) )
        || (exists d:Direction. <direction(d)> X(Px,d,fx,drx,liftbutton_i) )
        || <close> X(Px,dx,fx,closed,liftbutton_i)
        || (exists e:FExpr. <parking(e)> (val(normalise(or(neg(Px),e)) == tt) && X(Px,dx,fx,drx,liftbutton_i)))
        || (exists e:FExpr. <exists i:Floor. executive(e,on,i)> (val(normalise(or(neg(Px),e)) == tt) && X(Px,dx,fx,drx,liftbutton_i)))
        || (exists e:FExpr. <exists i:Floor. idling(e,i)> (val(normalise(or(neg(Px),e)) == tt) && X(Px,dx,fx,drx,liftbutton_i)))
        || (exists e:FExpr. <exists a:Signal. overload(e,a)> (val(normalise(or(neg(Px),e)) == tt) && X(Px,dx,fx,drx,liftbutton_i)))
        || (exists e:FExpr. <ttfull(e)> (val(normalise(or(neg(Px),e)) == tt) && X(Px,dx,fx,drx,liftbutton_i)))
        || (exists e:FExpr. <empty(e)> (val(normalise(or(neg(Px),e)) == tt) && X(Px,dx,fx,drx,false)))

        )
    )
)
