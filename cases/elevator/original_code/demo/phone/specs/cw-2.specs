--------------------------------------------------------
-- SPECs for Call Waiting feature (on phone1)
--------------------------------------------------------

SPEC AG (!ph[2].party=0 -> !ph[2].onhold=ph[2].party)

SPEC AG (ph[1].cw-msg & ph[1].dialled=2	-> ph[2].onhold=1)
SPEC AG (ph[3].cw-msg & ph[3].dialled=2	-> ph[2].onhold=3)
-- if we get cw-msg, the other side must have us onhold

SPEC AG (ph[1].st=talking & ph[1].dialled=2 &
         ph[3].st=talking & ph[3].dialled=2
       -> (ph[1].cw-msg <-> !ph[3].cw-msg))
-- of two partners in a CW situation exactly one hears CW announcement

SPEC AG (ph[1].cw-msg & ph[2].onhold=1 -> ph[1].dialled in {2,0})
SPEC AG (ph[3].cw-msg & ph[2].onhold=3 -> ph[3].dialled in {2,0})
-- if we're onhold, we have not dialled anyone but phone1

--------------------------------------------------------
-- The following SPECs are adapted from all-specs.smv
-- to take account of Call Waiting
--------------------------------------------------------

SPEC AG ((ph[1].dialled=2 & ph[1].st=talking)
      -> AF(ph[2].onhold=0 -> ((ph[1].st=idle & ph[2].st=ended)
                              |(ph[2].st=idle & ph[1].st=ended))))

SPEC AG ((ph[1].dialled=2 & ph[1].st=talking & !ph[1].cw-msg)
      -> AF(ph[2].onhold=0 -> ((ph[1].st=idle & ph[2].st=ended)
                              |(ph[2].st=idle & ph[1].st=ended))))
-- if ph[2] is talking to 1, both sides will clear (only) if there
-- is no call on hold
-- true when "weak" FAIRNESS [!st=xxx] active

SPEC AG ((ph[1].dialled=2 & ph[1].st=talking & !ph[1].cw-msg)
      -> EF ph[2].onhold=0)
-- ... and the premise "ph[2].onhold=0" can become true

-- trying is always directly followed by ringing- or busy-tone
SPEC AG (ph[1].st=trying
       -> AX ((ph[1].st=ringingt | ph[1].st=busyt | ph[1].st=talking)
             &(ph[1].st=talking -> ph[1].cw-msg)))
SPEC AG (ph[3].st=trying
       -> AX ((ph[3].st=ringingt | ph[3].st=busyt | ph[3].st=talking)
             &(ph[3].st=talking -> ph[3].cw-msg)))

SPEC AG (ph[2].st=talking & ph[2].dialled=1
       -> (ph[1].st=talked & !ph[1].cw-msg))
SPEC AG (ph[2].st=talking & ph[2].dialled=3
       -> (ph[3].st=talked & !ph[3].cw-msg))
SPEC AG (ph[2].st=talking & ph[2].dialled=4
       -> (ph[4].st=talked & !ph[4].cw-msg))
-- if ph[1] (with CW!) is talking,
-- the partner will be talked to and not get CW-msg

SPEC AG (ph[1].st=talking & !ph[1].cw-msg & ph[1].dialled=2 -> ph[2].st=talked)
SPEC AG (ph[1].st=talking & !ph[1].cw-msg & ph[1].dialled=3 -> ph[3].st=talked)
SPEC AG (ph[1].st=talking & !ph[1].cw-msg & ph[1].dialled=4 -> ph[4].st=talked)

SPEC AG (ph[3].st=talking & !ph[3].cw-msg & ph[3].dialled=1 -> ph[1].st=talked)
SPEC AG (ph[3].st=talking & !ph[3].cw-msg & ph[3].dialled=2 -> ph[2].st=talked)
SPEC AG (ph[3].st=talking & !ph[3].cw-msg & ph[3].dialled=4 -> ph[4].st=talked)

--------

-- -- A list of SPECs stating that if a phone is talked to, there has
-- -- to be one talking to it.
-- --   ie. "there is a ph[j] (j!=i) talking to ph[i]"
-- 
SPEC AG( (ph[1].st=talked & !ph[1].cw-msg) <->
         ((ph[2].st=talking & ph[2].dialled=1)
	 |(ph[3].st=talking & ph[3].dialled=1)
	 |(ph[4].st=talking & ph[4].dialled=1)))
SPEC AG( ph[2].st=talked <->
         ((ph[3].st=talking & !ph[3].cw-msg & ph[3].dialled=2)
	 |(ph[4].st=talking & !ph[4].cw-msg & ph[4].dialled=2)
	 |(ph[1].st=talking & !ph[1].cw-msg & ph[1].dialled=2)))
SPEC AG( (ph[4].st=talked & !ph[4].cw-msg) <->
	 ((ph[1].st=talking & ph[1].dialled=4)
         |(ph[2].st=talking & ph[2].dialled=4)
	 |(ph[3].st=talking & ph[3].dialled=4)))

--------

SPEC AG ((ph[2].dialled=1 & ph[2].st=trying)
         -> (A[ ph[2].dialled=1 U (ph[2].st=idle | !ph[2].onhold=0)]))
SPEC AG ((ph[2].dialled=4 & ph[2].st=trying)
         -> (A[ ph[2].dialled=4 U (ph[2].st=idle | !ph[2].onhold=0)]))
-- the dialled number cannot change whithout replacing the hand-set
-- unless we use CW

SPEC AG ((ph[2].dialled=1 & ph[2].st=trying)
         -> (A[ ph[2].dialled=1 U (ph[2].st=idle | ph[2].onhold in {3,4})]))
SPEC AG ((ph[2].dialled=4 & ph[2].st=trying)
         -> (A[ ph[2].dialled=4 U (ph[2].st=idle | ph[2].onhold in {1,3})]))
-- the dialled number cannot change whithout replacing the hand-set
-- or we get that other number on hold

--------
